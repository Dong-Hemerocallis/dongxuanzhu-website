{"version":3,"sources":["webpack://dongxuanzhu/./src/@lekoarts/gatsby-theme-emma/components/project-item.tsx","webpack://dongxuanzhu/./src/@lekoarts/gatsby-theme-emma/components/projects.tsx","webpack://dongxuanzhu/./node_modules/@lekoarts/gatsby-theme-emma-core/src/templates/projects-query.tsx","webpack://dongxuanzhu/./node_modules/@lekoarts/gatsby-theme-emma/src/@lekoarts/gatsby-theme-emma-core/components/projects.tsx"],"names":["node","style","eager","animated","sx","position","content","display","paddingTop","left","height","top","width","a","color","opacity","padding","zIndex","transition","textDecoration","G","loading","image","cover","childImageSharp","gatsbyImageData","alt","Link","to","slug","aria-label","title","backgroundColor","fontSize","fontWeight","client","service","projects","trail","useTrail","length","from","role","href","gridTemplateColumns","map","index","key","props","allProject","data","nodes"],"mappings":"+OAmGA,EA1EoB,SAAC,GAAD,IAAGA,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,MAAhB,OAClB,QAAC,EAAAC,SAAA,IAAD,CACEC,GAAI,CACFC,SAAS,WACT,WAAY,CACVC,QAAQ,KACRC,QAAQ,QACRC,WAAW,SAGfP,MAAOA,IAEP,eACEG,GAAI,CACFK,KAAM,EACNC,OAAO,OACPL,SAAS,WACTM,IAAK,EACLC,MAAM,OACNC,EAAG,CACDC,MAAM,QACNJ,OAAO,OACPD,KAAM,EACNM,QAAS,EACTC,QAAS,EACTX,SAAS,WACTM,IAAK,EACLC,MAAM,OACNK,OAAQ,GACRC,WAAW,uBACXC,eAAe,OACf,UAAW,CACTL,MAAM,QACNC,QAAS,EACTI,eAAe,YAKrB,eACEf,GAAI,CACF,QAAS,CACPM,OAAO,OACPD,KAAM,EACNJ,SAAS,sBACTM,IAAK,EACLC,MAAM,OACN,QAAS,CACPP,SAAS,yBAKf,QAAC,EAAAe,EAAD,CAAaC,QAASnB,EAAK,eAAqBoB,MAAOtB,EAAKuB,MAAMC,gBAAgBC,gBAAiBC,IAAI,OAEzG,QAAC,EAAAC,KAAD,CAAMC,GAAI5B,EAAK6B,KAAMC,aAAA,uBAAmC9B,EAAK+B,QAC3D,eACE3B,GAAI,CACF4B,gBAAiBhC,EAAKc,MACtBJ,OAAO,OACPD,KAAM,EACNJ,SAAS,WACTM,IAAK,EACLC,MAAM,OACNK,QAAS,MAGb,eAAKb,GAAI,CAAE6B,SAAU,EAAGC,WAAW,SAAYlC,EAAKmC,SACpD,eAAK/B,GAAI,CAAE6B,SAAU,IAAMjC,EAAKoC,aCbxC,EAvDiB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SACZC,GAAQC,cAASF,EAASG,OAAQ,CACtCC,KAAM,CAAE/B,OAAO,MACfkB,GAAI,CAAElB,OAAO,UAGf,OAAwB,IAApB2B,EAASG,QAET,QAAC,IAAD,MACE,QAAC,KAAD,MACE,QAAC,OAAD,gBAEE,gBAAME,KAAK,MAAMZ,aAAW,cAA5B,MAFF,KAME,mBANF,qBAOmB,gDAPnB,sDAQE,6BARF,oFASE,QAAC,OAAD,CAAUa,KAAK,kFAAf,UATF,oCAeA,QAAC,OAAD,MACE,2BADF,KACgB,mBADhB,iDAE+C,wCAF/C,sDAGoB,+BAHpB,mBAGuD,iCAHvD,kFAKE,QAAC,OAAD,CAAUA,KAAK,kFAAf,UALF,QAgBN,QAAC,IAAD,CACEvC,GAAI,CACFG,QAAQ,OACRqC,oBAAoB,uCACpBhC,MAAM,SAGP0B,EAAMO,KAAI,SAAC5C,EAAO6C,GAAR,OACT,QAAC,EAAD,CAAa7C,MAAOA,EAAOC,MAAiB,IAAV4C,EAAa9C,KAAMqC,EAASS,GAAQC,IAAKV,EAASS,GAAOjB,YCvEnG,MCQe,YAAgD,IAAjBmB,EAAgB,oBAElDC,EACND,EADFE,KAAQD,WAGV,OAAO,gBAAC,EAAD,eAAUZ,SAAUY,EAAWE,OAAWH","file":"component---node-modules-lekoarts-gatsby-theme-emma-core-src-templates-projects-query-tsx-bf27ec4d4b04ce8e7326.js","sourcesContent":["/** @jsx jsx */\nimport { jsx } from \"theme-ui\"\nimport { Link } from \"gatsby\"\nimport { animated } from \"react-spring\"\nimport { GatsbyImage, IGatsbyImageData } from \"gatsby-plugin-image\"\n\ntype ProjectItemProps = {\n  node: {\n    color: string\n    description:string\n    date: string\n    title: string\n    slug: string\n    service: string\n    client: string\n    cover: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n    }\n  }\n  style: any\n  eager?: boolean\n}\n\nconst ProjectItem = ({ node, style, eager }: ProjectItemProps) => (\n  <animated.div\n    sx={{\n      position: `relative`,\n      \"&:before\": {\n        content: `\"\"`,\n        display: `block`,\n        paddingTop: `100%`,\n      },\n    }}\n    style={style}\n  >\n    <div\n      sx={{\n        left: 0,\n        height: `100%`,\n        position: `absolute`,\n        top: 0,\n        width: `100%`,\n        a: {\n          color: `white`,\n          height: `100%`,\n          left: 0,\n          opacity: 0,\n          padding: 4,\n          position: `absolute`,\n          top: 0,\n          width: `100%`,\n          zIndex: 10,\n          transition: `all 0.3s ease-in-out`,\n          textDecoration: `none`,\n          \"&:hover\": {\n            color: `white`,\n            opacity: 1,\n            textDecoration: `none`,\n          },\n        },\n      }}\n    >\n      <div\n        sx={{\n          \"> div\": {\n            height: `100%`,\n            left: 0,\n            position: `absolute !important`,\n            top: 0,\n            width: `100%`,\n            \"> div\": {\n              position: `static !important`,\n            },\n          },\n        }}\n      >\n        <GatsbyImage loading={eager ? `eager` : `lazy`} image={node.cover.childImageSharp.gatsbyImageData} alt=\"\" />\n      </div>\n      <Link to={node.slug} aria-label={`View detail page of ${node.title}`}>\n        <div\n          sx={{\n            backgroundColor: node.color,\n            height: `100%`,\n            left: 0,\n            position: `absolute`,\n            top: 0,\n            width: `100%`,\n            zIndex: -2,\n          }}\n        />\n        <div sx={{ fontSize: 5, fontWeight: `bold` }}>{node.client}</div>\n        <div sx={{ fontSize: 2 }}>{node.service}</div>\n      </Link>\n    </div>\n  </animated.div>\n)\n\nexport default ProjectItem\n","/** @jsx jsx */\nimport { jsx, Container, Themed } from \"theme-ui\"\nimport { useTrail } from \"react-spring\"\nimport { IGatsbyImageData } from \"gatsby-plugin-image\"\nimport Layout from \"./layout\"\nimport ProjectItem from \"./project-item\"\n\ntype ProjectsProps = {\n  projects: {\n    color: string\n    description:string\n    date: string\n    slug: string\n    title: string\n    service: string\n    client: string\n    cover: {\n      childImageSharp: {\n        gatsbyImageData: IGatsbyImageData\n      }\n    }\n  }[]\n  [key: string]: any\n}\n\nconst Projects = ({ projects }: ProjectsProps) => {\n  const trail = useTrail(projects.length, {\n    from: { height: `0%` },\n    to: { height: `100%` },\n  })\n\n  if (projects.length === 0) {\n    return (\n      <Layout>\n        <Container>\n          <Themed.p>\n            Hi!{` `}\n            <span role=\"img\" aria-label=\"Wave emoji\">\n              ðŸ‘‹\n            </span>\n            {` `}\n            <br />\n            Thanks for using <b>@lekoarts/gatsby-theme-emma</b>. You currently don't have any content in your{` `}\n            <i>projects</i> folder - that's why this page displays a placeholder text. Head over to the{` `}\n            <Themed.a href=\"https://github.com/LekoArts/gatsby-themes/tree/master/themes/gatsby-theme-emma\">\n              README\n            </Themed.a>\n            {` `}\n            to learn how to setup them.\n          </Themed.p>\n          <Themed.p>\n            <b>TL;DR:</b> <br />\n            The starter automatically created the folder <code>content/projects</code>. Go into this folder, create a\n            new folder called <code>example</code> and create an <code>index.mdx</code> file there and place an image.\n            Edit the frontmatter like described in the{` `}\n            <Themed.a href=\"https://github.com/LekoArts/gatsby-themes/tree/master/themes/gatsby-theme-emma\">\n              README\n            </Themed.a>\n            .\n          </Themed.p>\n        </Container>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout\n      sx={{\n        display: `grid`,\n        gridTemplateColumns: `repeat(auto-fit, minmax(280px, 1fr))`,\n        width: `100%`,\n      }}\n    >\n      {trail.map((style, index) => (\n        <ProjectItem style={style} eager={index === 0} node={projects[index]} key={projects[index].slug} />\n      ))}\n    </Layout>\n  )\n}\n\nexport default Projects\n","import { graphql } from \"gatsby\"\nimport ProjectsComponent from \"../components/projects\"\n\nexport default ProjectsComponent\n\nexport const query = graphql`\n  query {\n    allProject(sort: { fields: date, order: DESC }) {\n      nodes {\n        color\n        slug\n        service\n        client\n        title\n        cover {\n          childImageSharp {\n            gatsbyImageData(width: 850, quality: 90)\n          }\n        }\n      }\n    }\n  }\n`\n","import * as React from \"react\"\nimport Projects from \"../../../components/projects\"\n\ntype Props = {\n  data: {\n    allProject: any\n    [key: string]: string\n  }\n  [key: string]: any\n}\n\nexport default function EmmaCoreProjects({ ...props }: Props) {\n  const {\n    data: { allProject },\n  } = props\n\n  return <Projects projects={allProject.nodes} {...props} />\n}\n"],"sourceRoot":""}